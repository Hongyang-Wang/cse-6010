/*
 * measure_pq.c
 *
 *  Created on: Sep 24, 2016
 *      Author: Frank
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "event/event_data.h"
#include "random/random.h"
#include "utils/priority_queue/PriorityQueue.h"

int main(int argc, char *argv[]) {
	// parse input
	if (argc != 3) {
		printf("The program takes in 2 arguments: N, num_iters\n");
		return -1;
	}
	int N = atoi(argv[1]);
	int num_iters = atoi(argv[2]);

	// create events
	init_rand(6010);
	Event *events = (Event *) malloc((N + num_iters) * sizeof(Event));
	for (int i = 0; i < N + num_iters; i++) {
		events[i].start_time = urand();
		events[i].station_id = -1;
		events[i].event_handler = NULL;
	}

	// init pq
	PriorityQueue pq;
	pq_init(&pq, &event_cmp);
	for (int i = 0; i < N; i++) {
		pq_push(&pq, events + i);
	}

	// measure the performance
	double avg_time = 0.0;
	time_t start_time, end_time;
	time(&start_time);
	for (int i = N; i < N + num_iters; i++) {
		pq_push(&pq, events + i);
		pq_pop(&pq);
	}
	time(&end_time);
	printf("Each iteration takes %f seconds\n", difftime(end_time, start_time));

	// clean
	while (pq_size(&pq) > 0) {
		pq_pop(&pq);
	}
	free(events);
	events = NULL;

}
